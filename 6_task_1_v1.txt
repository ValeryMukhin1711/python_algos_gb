Для тестов использовался скрипт по перемножению 16ричных чисел из предыдущего урока.
Так как объёмы были незначительны, искусственно добавлено создание списка.

Для уменьшения объёма скрипта тестирование работы со словарями и списками сделано во втором скрипте.
Файл 6_task_1_v2.py описание и аналитика в файле 6_task_1_v2.txt.

После декларирования и выполнения функции, а также операций со списком 
проводилась проверка памяти. Результаты отражены ниже. Как видно из результатов, наибольший объём памяти
потребовало создание списка.




memory usage accumulation
import memory_profiler[18.16015625] Mib
import deque[18.171875] Mib
import timeit[18.1796875] Mib
def sum_h_1[18.1796875] Mib
def sum_h_2[18.1796875] Mib
def mult_h_1[18.1796875] Mib
def mult_h_2 [18.1796875] Mib
declare n = 1000 [18.1796875] Mib
make list 1000[18.19140625] Mib
print my_list [18.21484375] Mib
declare n= 1000000 [18.21484375] Mib
make list 1000000 [37.4453125] Mib
timeit.timeit(sum_h_1('F','A','0')  [37.58203125] Mib

Тестирование скорости. 
Наибольшее время, как следовало ожидать, потребовалось для выполнения конечной функции,
которая при своей работе использует все предыдущие функции

results test speed
sum_h_1('F','A')  0.003792272999999735 sec
sum_h_2('1178','8A')  0.01711118299999992 sec
mult_h_1('2','A1'))  0.021140683999999688 sec
mult_h_2('1111','1A'))  0.10304724400000032 sec